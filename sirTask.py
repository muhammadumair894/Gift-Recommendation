# -*- coding: utf-8 -*-
"""SampleAIwithMob.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PKyQ2AROoDTRzMD1RkmVS8sG_5DPJuMx
"""

import pandas as pd
import numpy as np
import sklearn
import warnings

warnings.filterwarnings("ignore")



titanic_data = pd.read_csv("titanic.csv")
#titanic_data.head(2)
print(titanic_data.head(2))

titanic_data.columns

titanic_data.isnull().sum()

titanic_data.info()

titanic_data.drop("Cabin", axis=1, inplace=True)

# to check the null values
titanic_data.isnull().sum()

# Fill the values of Age column
titanic_data['Age'].fillna((titanic_data['Age'].mean()), inplace=True)

# check null values
titanic_data.isnull().sum()

# To drop all null values
titanic_data.dropna(inplace=True)

titanic_data.isnull().sum()

# To create dummies (categories)
sex = pd.get_dummies(titanic_data["Sex"], drop_first=True)
#sex.head(2)

Pcl = pd.get_dummies(titanic_data["Pclass"], drop_first=True)
#Pcl.head(2)

embark = pd.get_dummies(titanic_data["Embarked"], drop_first=True)
#embark.head(2)

titanic_data = pd.concat([titanic_data, sex, Pcl, embark], axis=1)
titanic_data.head(2)

titanic_data.drop(['Sex', 'Embarked', 'Pclass', 'Name', 'Ticket', 'PassengerId'], axis=1,
                  inplace=True)
titanic_data.head()

# Training and Testing data
X = titanic_data.drop("Survived", axis=1)
y = titanic_data["Survived"]
from sklearn.model_selection import train_test_split

# Splitting into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)
from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()
logmodel.fit(X_train, y_train)

predictions = logmodel.predict(X_test)

# Metrics
from sklearn.metrics import accuracy_score

print(accuracy_score(y_test, predictions) * 100)

predictions = logmodel.predict([[22.0, 1, 0, 7.2500, 1, 0, 1, 0, 1]])
#predictions

# !pip install flask - ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask, jsonify

app = Flask(__name__)
#run_with_ngrok(app)  # starts ngrok when the app is running

# /22/1/0/7.25/M/3/Braund"""

@app.route("/")
def home():
    abc = "helo world"
    return abc
"""@app.route("/<int:Age>/<int:SibSp>/<int:Parch>/<float:Fare>/<Gender>/<int:PClass>/<Place>")
def home(Age, SibSp, Parch, Fare, Gender, PClass, Place):
    p = []
    p += [Age, SibSp, Parch, Fare]
    if Gender.casefold() == "m":
        p += [1]
    else:
        p += [0]
    if PClass == 2:
        p += [1, 0]
    elif PClass == 3:
        p += [0, 1]
    else:
        p += [0, 0]
    if Place.casefold() == "queenstown":
        p += [1, 0]
    elif Place.casefold() == "southampton":
        p += [0, 1]
    else:
        p += [0, 0]
    arr = np.array([p])
    predict = logmodel.predict(arr)
    if predict == [1]:
        result = {'result': 'Survived'}
    else:
        result = {'result': 'NotSurvived'}

    return jsonify(result)"""

if __name__ == '__main__':
    app.run()
